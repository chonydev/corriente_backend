export default class BasicCRUDController {
  BasicCRUDService;
  table;
  constructor(basic_crud_service) {
    this.BasicCRUDService = basic_crud_service;
    this.table = basic_crud_service.table;
  }

  // ------------------------------------------------
  // ------------------------ Single item queries
  // ------------------------------------------------
  /*
  WARNINGS and PENDINGS
  ^ logs
  ^ error handler using next
  ^ async getById(req, res, next) {}
  */

  getAll = async (req, res, next) => {
    //^ logs_req(req)
    console.log('FROM getAll controller')
    console.log(req.url)
    console.log(this.table)
    try {
      const items = await this.BasicCRUDService.getAll(req.user.allowedFields);
      console.log(items)
      if (!items.length) {
        console.log('\nitem controller err');
        return res.status(404).json({ message: 'Items not found' });
      }
      console.log('controller end')
      req.user.allowedFields = ['get']
      res.json(items);
    } catch (err) {
      res.status(500).json({ message: err.message });
      console.error(err);
      //next(err)
    }
  }

  getById = async (req, res, next) => {
    const id = req.params.id
    console.log('\n\n------------------this.BasicCRUDService')
    console.log(this.BasicCRUDService.getById)
/*
    console.log('\n---------------this')
    console.log(this)
    console.log('\n---------------req.route')
    console.log(Object.keys(req.route))
    console.log(req.route.path)
    console.log(req.route.stack[0])
    console.log(req.route.methods)
    return res.status(404).json({ message: 'TEST' });
*/
  
    try {
      const item = await this.BasicCRUDService.getById(id, req.user.allowedFields);
      console.log('\n--------------- item from controller getbyid');
      console.log(item);
      if (!item.id) {
        return res.status(404).json({ message: 'Item by id not found' });
      }
      res.json(item);
    } catch (err) {
      //next(err);
      res.status(500).json({ message: err.message });
    }
  }
/*
  bulkGet = async (req, res, next) => {
    const ids = req.body;
    try {
      const items = await this.BasicCRUDService.bulkGet(ids);
      //^ Warning for not found items
      if (!items.length) {
        return res.status(404).json({ message: 'Items by id not found' });
      }
      res.json(items);
    } catch (err) {
      res.status(500).json({ message: err.message });
      //next(err);
    }
  }
*/
  create = async (req, res, next) => {
    const input = req.body;
    console.log(input);
    try {
      const newItem = await this.BasicCRUDService.create(input);
      //^ one
      if (!newItem.length) return res.status(409).json({ message: 'Item not added' });
      res.status(201).json(newItem);
    } catch (err) {
      res.status(500).json({ message: err.message });
      //next(err);
    }
  }

  update = async (req, res, next) => {
    const obj = req.body;
    console.log('\n\n ------------------- update controller objpayload req.user')
    console.log(obj)
    console.log(req.user)

    //^ PENDING authorization granularity
    let user = {id: req.user.userId, accountRole: req.user.accountRole, accountState: req.user.accountState}
    try {
      const editedItem = await this.BasicCRUDService.update({...obj, session: user});
      console.log('\n\n ------------------- update controller editeditem')
      console.log(editedItem)
      /*
      console.log(Array.isArray(editedItem))
      console.log(Object.keys(editedItem).length > 0)
      */
    
      //^ PENDING better approach ? conditions management set aside ?
      if (editedItem.constructor.name === 'Object') {
        if(Object.keys(editedItem).length === 0){return res.status(409).json({ message: 'Item not edited.' });}
      }
      if(Array.isArray(editedItem)) {
        if(editedItem.length === 0) {return res.status(409).json({ message: 'Item not edited.' });}
      }
      
      //if(editedItem === 'forbidden') {return res.status(403).json({ message: 'Not allowed to change other users data' });}

      res.status(201).json(editedItem);
    } catch (err) {
      res.status(500).json({ message: err.message });
      //next(err);
    }
  }

  delete = async (req, res, next) => {
    const id = req.params.id
    try {
      const deletedItem = await this.BasicCRUDService.delete(id);
      if (!Number(deletedItem)) {
        return res.status(202).json({ message: 'Item not found for deletion.' });
      }
      res.status(204).json(deletedItem);
    } catch (err) {
      res.status(500).json({ message: err.message });
      //next(err);
    }
  }

  // ------------------------------------------------
  // ------------------------ Bulk queries
  // ------------------------------------------------
  /*
  WARNINGS and PENDINGS
  ^ info retrieved
  */

  bulkGet = async (req, res, next) => {
    const ids = req.body;
    const allowed_fields = req.user.allowedFields
    try {
      const items = await this.BasicCRUDService.bulkGet(ids, allowed_fields);
      //^ Warning for not found items
      if (!items.length) {
        return res.status(404).json({ message: 'Items by id not found' });
      }
      res.json(items);
    } catch (err) {
      res.status(500).json({ message: err.message });
      //next(err);
    }
  }

  bulkCreate = async (req, res, next) => {
    const items = req.body
    try {
      const newItems = await this.BasicCRUDService.bulkCreate(items);
      if (!newItems.length) return res.status(409).json({ message: 'Items not created' });
      res.status(201).json(newItems);
    } catch (err) {
      res.status(500).json({ message: err.message });
      //next(err);
    }
  }

  bulkUpdate = async (req, res, next) => {
    const items = req.body
    try {
      const editedItems = await this.BasicCRUDService.bulkUpdate(items);
      if (!editedItems.length) return res.status(409).json({ message: 'Items not updated' });
      res.status(201).json(editedItems);
    } catch (err) {
      res.status(500).json({ message: err.message });
      //next(err);
    }
  }

  bulkDelete = async (req, res, next) => {
    const items = req.body
    try {
      const deletedItems = await this.BasicCRUDService.bulkDelete(items);
      if (!deletedItems) return res.status(409).json({ message: 'Items not deleted' });
      res.status(201).json({message: `${deletedItems} items deleted`});
    } catch (err) {
      res.status(500).json({ message: err.message });
      //next(err);
    }
  }

};